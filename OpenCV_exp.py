# -*- coding: utf-8 -*-
"""
OpenCV_exp.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UR6-FHPYHjGusbkpduf-cXs2ul5KD15i
"""

!pip install opencv-python
!pip install opencv-python-headless

import cv2
import numpy as np
from google.colab.patches import cv2_imshow
from google.colab import files
uploaded = files.upload()

image_path = list(uploaded.keys())[0]
image = cv2.imread(image_path)
cv2_imshow(image)

gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
cv2_imshow(gray_image)

edges = cv2.Canny(gray_image, 100, 200)
cv2_imshow(edges)

width = int(image.shape[1] / 2)
height = int(image.shape[0] / 2)
dim = (width, height)

resized_image = cv2.resize(image, dim, interpolation=cv2.INTER_AREA)
cv2_imshow(resized_image)

width = int(image.shape[1] * 2)
height = int(image.shape[0] * 2)
dim = (width, height)

resized_image = cv2.resize(image, dim, interpolation=cv2.INTER_LINEAR)
cv2_imshow(resized_image)

from sklearn.cluster import KMeans

image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
pixel_values = image.reshape((-1, 3))
pixel_values = np.float32(pixel_values)

criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)
k = 8

_, labels, centers = cv2.kmeans(pixel_values, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)

centers = np.uint8(centers)

quantized_image = centers[labels.flatten()]

quantized_image = quantized_image.reshape(image.shape)

quantized_image = cv2.cvtColor(quantized_image, cv2.COLOR_RGB2BGR)

cv2_imshow(quantized_image)

import matplotlib.pyplot as plt


plt.figure(figsize=(8, 2))
plt.title('Color Palette')
for i, color in enumerate(centers):
    plt.subplot(1, k, i + 1)
    plt.axis('off')
    plt.imshow([[color / 255.0]])
plt.show()

segmented_image = labels.reshape(image.shape[:2])

plt.figure(figsize=(8, 8))
plt.title('Segmented Image')
plt.imshow(segmented_image, cmap='viridis')
plt.axis('off')
plt.show()

def quantize_image(image, k):
    pixel_values = image.reshape((-1, 3))
    pixel_values = np.float32(pixel_values)
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 100, 0.2)
    _, labels, centers = cv2.kmeans(pixel_values, k, None, criteria, 10, cv2.KMEANS_RANDOM_CENTERS)
    centers = np.uint8(centers)
    quantized_image = centers[labels.flatten()]
    quantized_image = quantized_image.reshape(image.shape)
    return quantized_image

ks = [2, 4, 8, 16]
plt.figure(figsize=(12, 8))
for i, k in enumerate(ks):
    quantized_image = quantize_image(image, k)
    plt.subplot(2, 2, i + 1)
    plt.title(f'k = {k}')
    plt.imshow(cv2.cvtColor(quantized_image, cv2.COLOR_RGB2BGR))
    plt.axis('off')
plt.show()

from sklearn.cluster import MeanShift

# Using MeanShift for clustering
mean_shift = MeanShift()
mean_shift.fit(pixel_values)
labels = mean_shift.labels_
centers = mean_shift.cluster_centers_

centers = np.uint8(centers)
quantized_image = centers[labels.flatten()]
quantized_image = quantized_image.reshape(image.shape)

plt.figure(figsize=(8, 8))
plt.title('MeanShift Quantized Image')
plt.imshow(cv2.cvtColor(quantized_image, cv2.COLOR_RGB2BGR))
plt.axis('off')
plt.show()
